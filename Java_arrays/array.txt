1.Largest and Smallest Number:
Given an array A of integers.Implement a function which takes A as argument and 
returns the largest and smallest number in the array.

Sample Input

9 8 8 5 3 2 0

4 3 4 2 1

Sample Output

9 0

4 1

Explanation :

for test case one, largestElement is 9 & smallestElement is 0

Similarly for test case two, largestElement is 4 & smallestElement is 1.

2.Median of sorted Array:
Implement a function that takes a sorted array as argument and 
returns the median of the sorted Array.



Sample Input

1 2 3 3 4 5

1 4 5 5 6 7 8 9

Sample Output

3

5

Explanation :

for test case one, 3 is the middle most element in the sequence.

Similarly for test case two, 5 is the middle most element.

3.Kth smallest element in the array.
Implement a function that takes an array as argument and
 returns the kth smallest element of the array.


Sample Example 1

A = 4 3 2 1 4 6, K = 3

here 3rd smallest element is 3.

Hence output is 3.


Sample Example 2

A = 10 11 12 13, k = 4

here 4th smallest element is 13.

Hence output is 13.

4.Move all negative elements to one side of the array
Given an array arr and the size of the array as n consisting of 
positive and negative integers, move all the negative elements to 
the end of the array without changing the order of positive element and 
negative element.

Note: You don't have to return any array, you have to make changes in the 
input array itself.



Example 1.

Input: arr = [1, -2, -4, 5, 0]

Output: [1, 5, 0, -2, -4]



Example 2.

Input: arr = [1, -1, 3, 2, -7, -5, 11, 6]

Output: [1, 3, 2, 11, 6, -1, -7, -5]

5.Find intersection of the two arrays
Given two sorted integer arrays nums1 and nums2, print their intersection.

All the elements in nums1 and nums2 are unique. While printing, the order of elements must be maintained.

If there is no intersection, print -1 instead.

Note: Print a white space after each element.



Example 1.

Input: nums1 = [1, 2, 4, 9], nums2 = [2, 3, 5, 9, 11]

Output: 2 9

Explanation: Elements 2 and 9 are present in both arrays.



Example 2.

Input: nums1 = [5, 8, 10], nums2 = [2, 3, 6, 9, 11]

Output: -1

Explanation: There is no element common to both arrays.



Constraints: 0 <= nums1.length, nums2.length <= 20

6.Find the frequency of the given element
Given an array arr  and the size of the array as n and an element target , you need to implement the function getFrequency() which returns the frequency of target in arr.



Example 1.

Input: arr = [1, 2, 2], target = 2

Output: 2

Explanation: target = 2 appears two times in the array.



Example 2.

Input: arr = [1, 2, 2], target = 1

Output: 1

Explanation: target = 1 appears once in the array.



Constraints:

0 <= nums.length <= 20

-2^31 <= nums[i] <= 2^31-1

7.Pair Sum
Given an array of integers nums and an integer target, print the indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

While printing the answer, the order must be maintained.



Example 1.

Input: nums = [2, 7, 11, 15], target = 9

Output: (0,1)

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]



Example 2.

Input: nums = [3, 2, 4], target = 6

Output: (1,2)

Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]

8.Three Sum
Given an integer array nums, return 1 if there exists a triplet [nums[i], nums[j], 
nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0, 
else return 0.



Example 1.

Input: nums = [12,3,4,1,6,9]

Output: 1

Explanation: There exists a triplet nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0, 
so we return true.



Example 2.

Input: nums = [0, 1, 1]

Output: 0

Explanation: The only possible triplet does not sum up to 0.



Constraints:

3 <= nums.length <= 3000

-10^5 <= nums[i] <= 10^5

9.Rotate an array by K
Given an array nums and it's size n, rotate the array to the right by K steps
where K is non-negative.



Example 1.

Input: nums = [1,2,3,4,5,6,7], K = 3

Output: [5,6,7,1,2,3,4]

Explanation:

rotate 1 steps to the right: [7,1,2,3,4,5,6]

rotate 2 steps to the right: [6,7,1,2,3,4,5]

rotate 3 steps to the right: [5,6,7,1,2,3,4]



Example 2.

Input: nums = [-1,-100,3,99], K = 2

Output: [3,99,-1,-100]

Explanation:

rotate 1 steps to the right: [99,-1,-100,3]

rotate 2 steps to the right: [3,99,-1,-100]



Constraints:

1 <= nums.length <= 10^5

-2^31 <= nums[i] <= 2^31 - 1

0 <= k <= 10^5

10.find Missing number.
Given an array A of size (n-1) with all integers from 1 to n except one missing number.


Implement a function that takes A as an argument and returns the missing number.



Sample Input

3 4 2

6 3 2 5 1

Sample Output

1

4

Explanation :

for test case one, n = 4 and 1 is missing.

Similarly for test case two, n = 6 and 4 is missing.